# This is the Alpine-based Dockerfile for hpk.io

FROM alpine:3.12.2 AS hpk-web-base

LABEL version="0.1.0"
LABEL Description="Web app for hpk.io"
LABEL maintainer="Ada Wright <ada@hpk.io>"

ENV LANG en_AU.UTF-8
ENV SHELL /bin/bash
ENV DEBIAN_FRONTEND=noninteractive
ENV PIPENV_VENV_IN_PROJECT=1
ENV PYTHONUNBUFFERED=TRUE
ENV DJANGO_SETTINGS_MODULE=hpk.settings.prod

# Update apt, add PPAs, and install python 3.9
# Also, install system-Python packages
# NB: python3.9-dev is required for uWSGI (and Gunicorn too)
#RUN apt-get update && \
#    apt-get install -y software-properties-common && \
#    add-apt-repository -y ppa:deadsnakes/ppa && \
#    apt-get install -y \
#        curl jq vim zip unzip tree less \
#        libpython3.9 \
#        pipenv \
#        python3.9 python3.9-dev \
#        python3-pip \
#        python3-virtualenv && \
#    pip3 install \
#        flake8 \
#        pep8

RUN apk add --update-cache \
        bash curl jq less tree unzip vim zip \
        python3 python3-dev python3-tests python3-dbg \
        py3-pip py3-pip-bash-completion \
        py3-virtualenv
        #libpython3.9 \
        #pipenv \
        #python3.9 python3.9-dev \
        #python3-pip \
        #python3-virtualenv && \
    #pip3 install \
    #    flake8 \
    #    pep8

RUN pip install \
        flake8 \
        pep8 \
        pipenv

# Set up the Python virtualenv
WORKDIR /srv
COPY Pipfile ./
RUN pipenv install --skip-lock

# Expose port 8080 for Nginx
EXPOSE 8080

# Run a shell by default
CMD ["/bin/bash"]



#######################################
# BUILD LAYER (also the base for debug)
FROM hpk-web-base AS hpk-web-build

# Install dev system-packages and clean up after apt
RUN apt-get install -y \
        screen \
        python3.9-dev \
        libpython3.9-dev \
        && rm -rf /var/lib/apt/lists/*

# Install Node 14
RUN curl -sL https://deb.nodesource.com/setup_14.x | bash - && \
    apt-get install -y nodejs

# Install Python dev packages
COPY Pipfile.lock ./
RUN pipenv install --dev

# Set up the Node environment
COPY .node-version package.json package-lock.json .babelrc ./
RUN npm install --save-prod --save-dev

# Copy project files
COPY etc/env.* etc/*.config.* etc/*-lint.* etc/
COPY scripts/ scripts/

# Set up environment
RUN echo "SECRET_KEY=$(python3 scripts/generate_secret_key.py)" >> etc/env.prod && \
    ln -s etc/env.prod .env

# Build static files
COPY src/ src/
RUN npm run build



#######################################
# DEBUG (intended for development)
FROM hpk-web-build as hpk-web-debug

# Enabled debug everything
ENV DJANGO_SETTINGS_MODULE=hpk.settings.debug



#######################################
# STAGING
FROM hpk-web-base AS hpk-web-staging

# Default to production
ENV PYTHONUNBUFFERED=FALSE

# Install virtualenv for production
RUN pipenv install --deploy

# Copy project files
COPY etc/env.* etc/*.config.* etc/*-lint.* etc/
COPY scripts/ scripts/

# Copy source code in (do not mount; this is staging)
COPY src/ src/
