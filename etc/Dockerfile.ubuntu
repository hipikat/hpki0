#
# This is the Ubuntu-based Dockerfile for hpk.io
#
# hpk-web-base images set the basic environment and installs the baseline
# Python virtualenv, on top of Ubuntu.
#
# hpk-web-build extends hpk-web-base, and is used in the build pipeline.
# It installs the Node environment, developer dependencies, and a friendlier
# propt, before running the asset build pipeline.
#
# hpk-web-debug extends hpk-web-build, and enables debug flags across the
# project, so that it can be used as a development container.
#
# hpk-web-stage extends hpk-web-base, and is used for staging. It sets up
# the project with production settings, and copies built static files from
# hpk-web-build. Node is NOT installed by design, so `npm` calls won't work
# in staging containers.
#
# hpk-web-boxed extends hpk-web-base, creating a single 'fully deployed'
# image which mirrors a deployment to a single machine, including the 
# database and web server (but excluding a firewall, or https certs).
####

#######################################
# Base image for the web container for hpk.io
FROM ubuntu:focal AS hpk-web-base

LABEL version="0.1.0"
LABEL Description="Base image for hpk.io containers"
LABEL maintainer="Ada Wright <ada@hpk.io>"

ENV LANG en_AU.UTF-8
ENV SHELL /bin/bash
ENV DEBIAN_FRONTEND=noninteractive
ENV PIPENV_VENV_IN_PROJECT=1
ENV PYTHONUNBUFFERED=TRUE
ENV DJANGO_SETTINGS_MODULE=hpk.settings.prod

# Update apt, add PPAs, and install python 3.8
# Also, install system-Python packages
# NB: python3.8-dev is required for uWSGI (and Gunicorn too)
RUN apt-get update && \
    apt-get install -y software-properties-common && \
    add-apt-repository -y ppa:deadsnakes/ppa && \
    apt-get install -y \
        curl jq vim zip unzip tree less \
        libpython3.8 \
        pipenv \
        python3.8 python3.8-dev \
        python3-pip \
        python3-virtualenv && \
    pip3 install \
        flake8 \
        pep8

# Set up the Python virtualenv
WORKDIR /app/
COPY Pipfile ./

# NB: While the `pdjn` cli is in early developed, it's
# installed as local and editable (i.e. from cli/setup.py)
COPY cli/ cli/
RUN pipenv install --skip-lock

# Expose port 8080 for Nginx
EXPOSE 80

# Just run a shell by default
CMD ["/bin/bash"]



#######################################
# BUILD LAYER (also the base for debug)
FROM hpk-web-base AS hpk-web-build

LABEL Description="Web app for hpk.io"

# Install Node, and dev system-packages, and clean up after apt
RUN curl -sL https://deb.nodesource.com/setup_14.x | bash - && \
    apt-get install -y \
        nodejs \
        libpython3.8-dev \
        python3.8-dev \
        python3-virtualenvwrapper \
        git screen zsh sudo

# Install Python dev packages
COPY Pipfile.lock ./
RUN pipenv install --dev

# Set up the Node environment
COPY .node-version package.json package-lock.json .babelrc ./
RUN npm install --save-prod --save-dev

# Install "oh-my-zsh" for a useable prompt
RUN sh -c "$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
COPY etc/oh-my.zshrc ./
RUN echo "unsafe-perm = true" > ~/.npmrc \
    npm install --global pure-prompt
    #mkdir /root/.npm && \
    #sudo chown -R 65534:0 "/root/.npm" && \

# Copy project files
COPY etc/env.prod etc/webpack.config.js etc/
COPY bin/ bin/

# Set up environment
RUN ln -s etc/env.prod .env && \
    python3 bin/generate_secret_key.py

# Build static files
COPY src/ src/
RUN npm run webpack
RUN .venv/bin/python src/manage.py collectstatic --no-input



#######################################
# DEBUG (intended for development)
FROM hpk-web-build as hpk-web-debug

# Enabled debug settings, set debug environment
ENV DJANGO_SETTINGS_MODULE=hpk.settings.debug
RUN rm .env ; ln -s etc/env.debug .env



#######################################
# STAGING (stripped-down and optimised by prod settings)
FROM hpk-web-base AS hpk-web-stage

ENV PYTHONUNBUFFERED=FALSE

# Install virtualenv for production
COPY Pipfile.lock ./
RUN pipenv install --deploy

# Copy project files
COPY etc/env.* etc/*.config.* etc/*-lint.* etc/
COPY bin/ bin/

# Copy static files built by the build image
COPY --from=hpk-web-build /app/static ./static

# Copy source code in (do not mount; this is staging)
#COPY src/ src/



#######################################
# BOXED (production-like image for a single-machine deploy)
#       (but with Node, for convenience and development)
FROM hpk-web-build AS hpk-web-boxed

# Install Salt (and don't bother cleaning up after apt)
RUN apt-get install -y \
        git screen sudo supervisor wget

RUN wget -O - https://repo.saltstack.com/py3/ubuntu/20.04/amd64/latest/SALTSTACK-GPG-KEY.pub | sudo apt-key add - && \
    echo "deb http://repo.saltstack.com/py3/ubuntu/20.04/amd64/latest focal main" >> /etc/apt/sources.list.d/saltstack.list && \
    apt-get update && \
    apt-get install -y  salt-minion

# Install everything with Salt
RUN mkdir /srv/formulas && \
    git clone https://github.com/saltstack-formulas/nginx-formula /srv/formulas/nginx-formula && \
    git clone https://github.com/saltstack-formulas/postgres-formula.git /srv/formulas/postgres-formula && \
    git clone https://github.com/saltstack-formulas/users-formula.git /srv/formulas/users-formula && \
    git clone https://github.com/hipikat/homeboy-formula /srv/formulas/homeboy-formula

COPY etc/salt/minion.conf /etc/salt/minion
COPY etc/salt/top.sls /srv/salt/top.sls
COPY etc/salt/pillar /srv/pillar

RUN salt-call state.apply --local

# Add trimmings
COPY etc/ etc/
COPY package.json LICENSE.md ./

# Run everything with Supervisor
COPY etc/salt/supervisord-boxed.conf /etc/supervisor/conf.d/supervisord.conf
CMD ["/usr/bin/supervisord"]
